//------代码生成------------代码生成------------代码生成------------代码生成------
import fs from "fs";
import { J_Lex } from "../../../J_LexYacc.js";
/**J_Lex输入参数*/
var lex = {
  input: {
    /**词法分析器输出代码配置 */
    code: {
      /**代码前缀，将添加到输出代码的最前面 */
      prefix: `/*J_LexDemo-全用法解析【此代码为自动生成代码】*/`,
      /**代码后缀，将添加到输出代码的最后面 */
      suffix: `
        export default J_Lexers;`, //模块化输出
    },
    /**词法正则表达式 */
    regxs: [
      //支持中文ID和中文词法解析
      { id: "中文也支持噢", regx: "耶" },
      //|使用，表示或
      //()使用，用于确定结合优先级
      //+使用，表示前面的字符串重复1~n次
      { id: "01string", regx: "(0|1)+" },
      //{}使用，引用其他词法定义
      //*使用，表示前面的字符串重复0~n次
      { id: "float", regx: "{数字}*.{数字}+" },
      //[]使用，等价于"\r|\n|\t| "，注意空格
      { id: "ws", regx: "[\r\n\t ]" },
      //-使用，等价于"<(c)=\\>c.charCodeAt(0)>=48&&c.charCodeAt(0)<=57>"
      //noMatch属性使用，表示该词法不需要匹配
      { id: "数字", regx: "[0-9]", noMatch: true },
      //<>使用，定义匹配函数function(c)=>bool，匹配一个字符，匹配与否由函数决定
      { id: "非引号字符", regx: `<(c)=\\>c != '"'>` },
      //\（反斜杠）使用，加在+*-|\()[]{}<>等前，用于表示其本身含义
      {
        id: "反斜杠使用",
        regx: "\\+|\\*|\\-|\\||\\\\|\\(|\\)|\\[|\\]|\\{|\\}|\\<|\\>",
      },
      //综合案例：识别c语言注释
      { id: "注释", regx: "//<(c)=\\>c != '\\\\n'>*" },
    ],
  },
};
//运行J_Lex，输出代码保存在lex.code中
console.log("开始生成");
J_Lex.run(lex);

//将生成的代码写入到文件
fs.writeFileSync("./out/J_Lexers.js", lex.code);
console.log("生成完毕");
