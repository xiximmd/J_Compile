/*测试*/
        class J_SimpleLexers {
              static info = {stateTranTable:{"l_0":1,"s_0":11,"b_0":21,"d_0":24,"f_0":29,"i_0":35,"r_0":38,"e_0":44,"w_0":48,"(_0":53,")_0":54,"[_0":55,"]_0":56,"{_0":57,"}_0":58,"!_0":59,"=_0":61,"/_0":63,"*_0":65,"%_0":67,"+_0":69,"-_0":72,"<_0":85,">_0":91,"&_0":95,"^_0":98,"|_0":100,"?_0":103,";_0":104,":_0":105,",_0":106,"~_0":107,"._0":108,"'_0":109,"\"_0":112," _0":114,"\t_0":114,"\n_0":114,"\r_0":114,"#_0":116,"o_1":2,"n_2":3,"g_3":4," _4":5,"l_5":6,"o_6":7,"n_7":8,"g_8":9,"h_11":12,"i_11":16,"o_12":13,"r_13":14,"t_14":15,"z_16":17,"e_17":18,"o_18":19,"f_19":20,"y_21":22,"t_22":23,"e_23":15,"o_24":25,"u_25":26,"b_26":27,"l_27":28,"e_28":15,"l_29":30,"o_29":33,"o_30":31,"a_31":32,"t_32":15,"r_33":34,"n_35":36,"f_35":37,"t_36":15,"e_38":39,"t_39":40,"u_40":41,"r_41":42,"n_42":43,"l_44":45,"s_45":46,"e_46":47,"h_48":49,"i_49":50,"l_50":51,"e_51":52,"=_59":60,"=_61":62,"=_63":64,"=_65":66,"=_67":68,"=_69":70,"+_69":71,"=_72":73,"-_72":74,">_72":75,"._77":78,"._80":78,"._83":78,"._84":78,"<_85":86,"=_85":88,">_85":89,"=_86":87,">_88":89,">_90":89,">_91":92,"=_91":94,"=_92":93,"=_95":96,"&_95":97,"=_98":99,"=_100":101,"|_100":102,"'_109":110,"'_111":110,"\"_112":110,"\"_113":110," _114":115,"\t_114":115,"\n_114":115,"\r_114":115," _115":115,"\t_115":115,"\n_115":115,"\r_115":115,"i_116":117,"n_117":118,"c_118":119,"l_119":120,"u_120":121,"d_121":122,"e_122":123,"._125":126,"._128":126,"._131":126,"._132":126,"._136":126,"._137":126,"._138":126,"._139":126,"._144":126,"._145":126,"._146":126,"._147":126},funcTranTable:{"ffft_0":124,"fftf_0":125,"fftt_0":128,"ftff_0":129,"ftft_0":130,"fttf_0":131,"fttt_0":132,"tfff_0":133,"tfft_0":134,"tftf_0":136,"tftt_0":138,"ttff_0":140,"ttft_0":142,"tttf_0":144,"tttt_0":146,"t_1":10,"t_2":10,"t_3":10,"t_4":10,"t_10":10,"t_11":10,"t_12":10,"t_13":10,"t_14":10,"t_15":10,"t_16":10,"t_17":10,"t_18":10,"t_19":10,"t_20":10,"t_21":10,"t_22":10,"t_23":10,"t_24":10,"t_25":10,"t_26":10,"t_27":10,"t_28":10,"t_29":10,"t_30":10,"t_31":10,"t_32":10,"t_33":10,"t_34":10,"t_35":10,"t_36":10,"t_37":10,"t_38":10,"t_39":10,"t_40":10,"t_41":10,"t_42":10,"t_43":10,"t_44":10,"t_45":10,"t_46":10,"t_47":10,"t_48":10,"t_49":10,"t_50":10,"t_51":10,"t_52":10,"fft_72":76,"ftf_72":77,"ftt_72":80,"tff_72":81,"tft_72":82,"ttf_72":83,"ttt_72":84,"t_76":76,"t_77":77,"t_78":79,"t_79":79,"ft_80":76,"tf_80":77,"tt_80":80,"t_81":81,"ft_82":76,"tf_82":81,"tt_82":82,"ft_83":77,"tf_83":81,"tt_83":83,"fft_84":76,"ftf_84":77,"ftt_84":80,"tff_84":81,"tft_84":82,"ttf_84":83,"ttt_84":84,"t_85":90,"t_88":90,"t_90":90,"t_109":111,"t_111":111,"t_112":113,"t_113":113,"t_124":124,"t_125":125,"t_126":127,"t_127":127,"ft_128":124,"tf_128":125,"tt_128":128,"t_129":129,"ft_130":124,"tf_130":129,"tt_130":130,"ft_131":125,"tf_131":129,"tt_131":131,"fft_132":124,"ftf_132":125,"ftt_132":128,"tff_132":129,"tft_132":130,"ttf_132":131,"ttt_132":132,"t_133":10,"ft_134":124,"tf_134":10,"tt_134":135,"ft_135":124,"tf_135":10,"tt_135":135,"ft_136":125,"tf_136":10,"tt_136":137,"ft_137":125,"tf_137":10,"tt_137":137,"fft_138":124,"ftf_138":125,"ftt_138":128,"tff_138":10,"tft_138":135,"ttf_138":137,"ttt_138":139,"fft_139":124,"ftf_139":125,"ftt_139":128,"tff_139":10,"tft_139":135,"ttf_139":137,"ttt_139":139,"ft_140":129,"tf_140":10,"tt_140":141,"ft_141":129,"tf_141":10,"tt_141":141,"fft_142":124,"ftf_142":129,"ftt_142":130,"tff_142":10,"tft_142":135,"ttf_142":141,"ttt_142":143,"fft_143":124,"ftf_143":129,"ftt_143":130,"tff_143":10,"tft_143":135,"ttf_143":141,"ttt_143":143,"fft_144":125,"ftf_144":129,"ftt_144":131,"tff_144":10,"tft_144":137,"ttf_144":141,"ttt_144":145,"fft_145":125,"ftf_145":129,"ftt_145":131,"tff_145":10,"tft_145":137,"ttf_145":141,"ttt_145":145,"ffft_146":124,"fftf_146":125,"fftt_146":128,"ftff_146":129,"ftft_146":130,"fttf_146":131,"fttt_146":132,"tfff_146":10,"tfft_146":135,"tftf_146":137,"tftt_146":139,"ttff_146":141,"ttft_146":143,"tttf_146":145,"tttt_146":147,"ffft_147":124,"fftf_147":125,"fftt_147":128,"ftff_147":129,"ftft_147":130,"fttf_147":131,"fttt_147":132,"tfff_147":10,"tfft_147":135,"tftf_147":137,"tftt_147":139,"ttff_147":141,"ttft_147":143,"tttf_147":145,"tttt_147":147},ftable:{"0":[[0,1],[2],[2],[2]],"1":[[0,1,2]],"2":[[0,1,2]],"3":[[0,1,2]],"4":[[0,1,2]],"10":[[0,1,2]],"11":[[0,1,2]],"12":[[0,1,2]],"13":[[0,1,2]],"14":[[0,1,2]],"15":[[0,1,2]],"16":[[0,1,2]],"17":[[0,1,2]],"18":[[0,1,2]],"19":[[0,1,2]],"20":[[0,1,2]],"21":[[0,1,2]],"22":[[0,1,2]],"23":[[0,1,2]],"24":[[0,1,2]],"25":[[0,1,2]],"26":[[0,1,2]],"27":[[0,1,2]],"28":[[0,1,2]],"29":[[0,1,2]],"30":[[0,1,2]],"31":[[0,1,2]],"32":[[0,1,2]],"33":[[0,1,2]],"34":[[0,1,2]],"35":[[0,1,2]],"36":[[0,1,2]],"37":[[0,1,2]],"38":[[0,1,2]],"39":[[0,1,2]],"40":[[0,1,2]],"41":[[0,1,2]],"42":[[0,1,2]],"43":[[0,1,2]],"44":[[0,1,2]],"45":[[0,1,2]],"46":[[0,1,2]],"47":[[0,1,2]],"48":[[0,1,2]],"49":[[0,1,2]],"50":[[0,1,2]],"51":[[0,1,2]],"52":[[0,1,2]],"72":[[2],[2],[2]],"76":[[2]],"77":[[2]],"78":[[2]],"79":[[2]],"80":[[2],[2]],"81":[[2]],"82":[[2],[2]],"83":[[2],[2]],"84":[[2],[2],[2]],"85":[[3]],"88":[[3]],"90":[[3]],"109":[[4]],"111":[[4]],"112":[[5]],"113":[[5]],"124":[[2]],"125":[[2]],"126":[[2]],"127":[[2]],"128":[[2],[2]],"129":[[2]],"130":[[2],[2]],"131":[[2],[2]],"132":[[2],[2],[2]],"133":[[0,1,2]],"134":[[0,1,2],[2]],"135":[[0,1,2],[2]],"136":[[0,1,2],[2]],"137":[[0,1,2],[2]],"138":[[0,1,2],[2],[2]],"139":[[0,1,2],[2],[2]],"140":[[0,1,2],[2]],"141":[[0,1,2],[2]],"142":[[0,1,2],[2],[2]],"143":[[0,1,2],[2],[2]],"144":[[0,1,2],[2],[2]],"145":[[0,1,2],[2],[2]],"146":[[0,1,2],[2],[2],[2]],"147":[[0,1,2],[2],[2],[2]]},funcs:["(c)=>c.charCodeAt(0)>=65&&c.charCodeAt(0)<=90","(c)=>c.charCodeAt(0)>=97&&c.charCodeAt(0)<=122","(c)=>c.charCodeAt(0)>=48&&c.charCodeAt(0)<=57","(c)=>(c != '<' && c != '>')","(c)=>c != \"'\"","(c)=>c != '\"'"],AccStatID:[[],[53],[53],[53],[53],[],[],[],[],[1],[53],[53],[53],[53],[53],[1,53],[53],[53],[53],[53],[52,53],[53],[53],[53],[53],[53],[53],[53],[53],[53],[53],[53],[53],[53],[2,53],[53],[53],[4,53],[53],[53],[53],[53],[53],[3,53],[53],[53],[53],[5,53],[53],[53],[53],[53],[6,53],[7],[8],[9],[10],[11],[12],[49],[13],[15],[14],[35],[16],[34],[17],[36],[18],[32],[19],[30],[33],[20],[31],[51],[55],[],[],[55],[55],[54],[54,55],[54],[54,55],[28],[46],[21],[27],[60],[],[29],[47],[22],[26],[45],[23],[42],[44],[24],[43],[25],[41],[37],[38],[39],[40],[48],[50],[],[56],[],[],[],[57,58],[57],[],[],[],[],[],[],[],[59],[55],[],[],[55],[55],[54],[54,55],[54],[54,55],[53],[53,55],[53,55],[53],[53],[53,55],[53,55],[53,54],[53,54],[53,54,55],[53,54,55],[53,54],[53,54],[53,54,55],[53,54,55],],codeToName:{"1":"type","2":"for","3":"return","4":"if","5":"else","6":"while","7":"(","8":")","9":"[","10":"]","11":"{","12":"}","13":"!=","14":"==","15":"=","16":"/=","17":"*=","18":"%=","19":"+=","20":"-=","21":"<<=","22":">>=","23":"&=","24":"^=","25":"|=","26":">=","27":"<=","28":"<","29":">","30":"++","31":"--","32":"+","33":"-","34":"*","35":"/","36":"%","37":"?","38":";","39":":","40":",","41":"||","42":"&&","43":"|","44":"^","45":"&","46":"<<","47":">>","48":"~","49":"!","50":".","51":"->","52":"sizeof","53":"id","54":"integer","55":"float","56":"string","57":"ws","58":"blank","59":"#include","60":"<>"}}
      static stateTranTableInit() {
        if (this.info.stateTranTableInited != true) {
          for (var i = 0; i < this.info.funcs.length; ++i) {
            this.info.funcs[i] = eval(this.info.funcs[i]);
          }
          this.info.stateTranTableInited = true;
        }
      }
      constructor() {
        this.initState();
        J_Lexers.stateTranTableInit();
      }
      initState() {
        this.string = "";
        this.state = 0;
      }
      /**
       * 处理一个字符
       * @param {*} char 输入字符
       */
      readChar(char) {
        var next = J_SimpleLexers.info.stateTranTable[char + "_" + this.state];
        if (next == undefined) {
          var ft = J_SimpleLexers.info.ftable[this.state];
          if (ft == undefined) {
            return false;
          } else {
            var string = "";
            for (var i = 0; i < ft.length; ++i) {
              var temp = ft[i];
              var t = false;
              for (var j = 0; j < temp.length; ++j) {
                if (J_SimpleLexers.info.funcs[temp[j]](char)) {
                  t = true;
                  break;
                }
              }
              if (t) {
                string += "t";
              } else {
                string += "f";
              }
            }
            var next = J_SimpleLexers.info.funcTranTable[string + "_" + this.state];
            if (next == undefined) {
              return false;
            } else {
              this.state = next;
              this.string += char;
              return true;
            }
          }
        } else {
          this.state = next;
          this.string += char;
          return true;
        }
      }
    }
    class J_Lexers extends J_SimpleLexers {
      /**
       * 初始化词法分析器状态，每次重新运行前调用
       */
      initState() {
        super.initState();
        this.lastFinal = { state: 0, string: "" };
      }
      /**
       * 实行一次最大匹配，支持流式读取，若inputStr不足以形成一个符号，则返回null，可继续调用readTag(接下来的内容)，直到最大匹配并返回匹配到的词法符号
       * @param {*} inputStr 内容字符串
       * @returns 如果识别到一个词法符号则返回对象var output = {tag:[匹配符号1,匹配符号2...],value:"匹配字符串",restStr:"剩余的字符串"}，如果未识别到一个词法符号则返回null。如果匹配非法，则output.error = true
       */
      readTag(inputStr) {
        var output = {};
        for (var i = 0; i < inputStr.length; ++i) {
          var b = this.readChar(inputStr.charAt(i));
          var stateS = J_Lexers.info.AccStatID[this.state];
          if (stateS.length > 0) {
            this.lastFinal.state = this.state;
            this.lastFinal.string = this.string;
          }
          if (!b) {
            var state = this.lastFinal.state;
            var stateS = J_Lexers.info.AccStatID[state];
            var stateName = [];
            stateS.forEach((v) => {
              stateName.push(J_Lexers.info.codeToName[v]);
            });
            output.tag = stateName;
            output.value = this.lastFinal.string;
            output.restStr =
              this.string.substring(this.lastFinal.string.length) +
              inputStr.substring(i);
    
            this.initState();
            if (state == 0) {
              output.error = true;
            }
            return output;
          }
        }
        return null;
      }
      /**
       * 内容读取结束后调用，输出最后一次匹配内容，如果无法匹配全部内容 output.error = true
       * @returns 同readTag
       */
      finishRead() {
        var output = {};
        var state = this.lastFinal.state;
        var stateS = J_Lexers.info.AccStatID[state];
        var stateName = [];
        stateS.forEach((v) => {
          stateName.push(J_Lexers.info.codeToName[v]);
        });
        output.tag = stateName;
        output.value = this.lastFinal.string;
        output.restStr = this.string.substring(this.lastFinal.string.length);
    
        this.initState();
        if (output.restStr.length > 0) {
          output.error = true;
        }
        return output;
      }
    }
        
        export default J_Lexers;